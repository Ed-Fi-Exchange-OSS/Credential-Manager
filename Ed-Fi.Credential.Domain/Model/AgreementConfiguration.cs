// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Ed_Fi.Credential.Domain.Model
{

    // Agreement
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.32.0.0")]
    public partial class AgreementConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Agreement>
    {
        public AgreementConfiguration()
            : this("dbo")
        {
        }

        public AgreementConfiguration(string schema)
        {
            ToTable("Agreement", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AgreementTypeId).HasColumnName(@"AgreementTypeId").HasColumnType("int").IsRequired();
            Property(x => x.WamsId).HasColumnName(@"WamsId").HasColumnType("char").IsOptional().IsFixedLength().IsUnicode(false).HasMaxLength(30);
            Property(x => x.Agree).HasColumnName(@"Agree").HasColumnType("bit").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifierId).HasColumnName(@"ModifierId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(30);
            Property(x => x.VendorId).HasColumnName(@"VendorId").HasColumnType("int").IsOptional();
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Vendor).WithMany(b => b.Agreements).HasForeignKey(c => c.VendorId).WillCascadeOnDelete(false); // FK_Agreement_Vendor
            HasRequired(a => a.Lookup).WithMany(b => b.Agreements).HasForeignKey(c => c.AgreementTypeId).WillCascadeOnDelete(false); // FK_Agreement_Type
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
